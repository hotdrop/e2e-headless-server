---
description: 
globs: 
alwaysApply: false
---
# Google Cloud Secret Manager
Secret Manager is a fully managed service that allows you to securely store sensitive data such as API keys, passwords, and certificates, and strictly control access.

Benefits of using Secret Manager:

1. High security:

* Secrets (such as API keys) are encrypted and stored by Google.

* Integrated with IAM (Identity and Access Management), giving you fine-grained control over who can access which secrets. You can grant Cloud Run service accounts only the permissions they need.

* Access logs are recorded, so you can track audit trails.

1. Easy management and updates:

* No need to redeploy applications: Updating the value of a secret stored in Secret Manager does not require redeploying applications running on Cloud Run. Applications retrieve the latest value from Secret Manager at runtime.

* Versioning: Secrets have versions, and you can revert to past versions or access them by specifying a specific version. You can always retrieve the latest value by specifying the "latest" version.

* Console/gcloud/API operations: You can easily create, update, and manage secrets via the Google Cloud Console, the `gcloud` command line tool, or client libraries.

1. Integration with Cloud Run:
* You can easily access secrets from your application code by simply granting the necessary IAM role (`roles/secretmanager.secretAccessor`) to the Cloud Run service account.
* There is also a function to mount secrets as environment variables, but retrieving them from code at runtime may make it easier to reflect updates immediately.

Overview of implementation steps:

1. Enable Secret Manager API: Enable Secret Manager API in your Google Cloud project.

2. Create a secret:
* Create a secret in Google Cloud Console or `gcloud` command (e.g. `my-api-key`).
* Set the actual API key value as the first version.
```bash
# gcloudコマンドの例
echo "YOUR_INITIAL_API_KEY" | gcloud secrets create my-api-key --data-file=- --replication-policy=automatic
```

3. Configure IAM permissions:
* Identify the service account that the Cloud Run service will use (usually the default Compute Engine service account or a service account that you specify).
* Grant that service account permission to access the secrets you created (the `Secret Manager Secret Accessor` role).
```bash
# gcloudコマンドの例 (PROJECT_IDとSERVICE_ACCOUNT_EMAILを置き換える)
gcloud secrets add-iam-policy-binding my-api-key \
    --member="serviceAccount:SERVICE_ACCOUNT_EMAIL" \
    --role="roles/secretmanager.secretAccessor"
```

4. Python (Flask) アプリケーションでの実装:
* Install the `google-cloud-secret-manager` library (add it to `requirements.txt`).
```
google-cloud-secret-manager
```
* In your application code, get the API key from Secret Manager. It is efficient to get it once at application startup and keep it in memory.
```python
import os
from flask import Flask, request, jsonify
from google.cloud import secretmanager

app = Flask(__name__)

# --- Get your API key from Secret Manager ---
API_KEY = None
try:
    client = secretmanager.SecretManagerServiceClient()
    # Replace PROJECT_ID with your project ID
    project_id = os.environ.get("GOOGLE_CLOUD_PROJECT") # Obtained from environment variables or specified directly
    secret_id = "my-api-key" # The name of the secret you created
    version_id = "latest" # Always get the latest version

    name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"
    response = client.access_secret_version(request={"name": name})
    API_KEY = response.payload.data.decode("UTF-8")
    print("Successfully loaded API Key from Secret Manager.")
except Exception as e:
    print(f"Error loading API Key from Secret Manager: {e}")
    # Error handling: What to do if the key cannot be obtained at startup (e.g., stop the application)
    # For the sake of demonstration, leave it as None here, but appropriate processing is required in production
    pass
# -------------------------------------

# --- Decorator for API key authentication ---
def require_api_key(f):
    @wraps(f)
    def decorated_function(*args, kwargs):
        provided_key = request.headers.get('X-API-Key')
        if not API_KEY:
              # If you cannot get the key from Secret Manager
              print("Server Error: API Key not configured.")
              return jsonify({"error": "Internal server error"}), 500
        if provided_key and provided_key == API_KEY:
            return f(*args, kwargs)
        else:
            print(f"Unauthorized access attempt. Provided key: {provided_key}")
            return jsonify({"error": "Unauthorized"}), 401
    return decorated_function
# ----------------------------------

@app.route('/api/protected')
@require_api_key
def protected_resource():
    return jsonify({"message": "This is a protected resource."})

@app.route('/api/public')
def public_resource():
    return jsonify({"message": "This is a public resource."})

if __name__ == '__main__':
    # The PORT environment variable is set in Cloud Run.
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)
```

* (Note) The above code is missing the `require_api_key` decorator, so you will need to add it (you will also need to import wraps).
```python
from functools import wraps # Add this
# ... (other code) ...

# --- Decorator for API key authentication ---
def require_api_key(f):
    @wraps(f) # Add this
    def decorated_function(*args, kwargs):
        provided_key = request.headers.get('X-API-Key') # The header name is arbitrary. (exp: X-API-Key)
        if not API_KEY:
              print("Server Error: API Key not configured.")
              return jsonify({"error": "Internal server error"}), 500
        if provided_key and provided_key == API_KEY:
            return f(*args, kwargs)
        else:
            print(f"Unauthorized access attempt. Provided key: {provided_key}")
            return jsonify({"error": "Unauthorized"}), 401 # or 403 Forbidden
    return decorated_function
# ----------------------------------
```

5. Update your API key:
* If you want to change your API key, add a new version to `my-api-key` in Secret Manager.
``bash
# Example gcloud command
echo "YOUR_NEW_API_KEY" | gcloud secrets versions add my-api-key --data-file=-
``
* The next time your Cloud Run instance starts (or whenever you have logic to re-fetch it in your code), it will automatically get the new `latest` version of your key.